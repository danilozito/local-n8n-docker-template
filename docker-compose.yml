version: '3.8'

volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  nginx_ssl:

networks:
  n8n_internal:
    internal: true

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: always
    networks:
      - n8n_internal
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - 5432

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: always
    networks:
      - n8n_internal
    expose:
      - 6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: always
    networks:
      - n8n_internal
    expose:
      - 11434
    volumes:
      - ollama_storage:/root/.ollama
    gpus: all
    entrypoint: /bin/sh
    command:
      - "-c"
      - |
        ollama pull llama3.2 && \
        exec ollama serve --host 0.0.0.0

  n8n-import:
    image: n8nio/n8n:latest
    container_name: n8n-import
    restart: "no"
    networks:
      - n8n_internal
    env_file:
      - .env
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY
      - N8N_USER_MANAGEMENT_JWT_SECRET
      - OLLAMA_HOST=ollama:11434
    volumes:
      - ./n8n/demo-data:/demo-data
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: /bin/sh
    command:
      - "-c"
      - |
        n8n import:credentials --separate --input=/demo-data/credentials && \
        n8n import:workflow    --separate --input=/demo-data/workflows

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: always
    networks:
      - n8n_internal
    expose:
      - 5678
    env_file:
      - .env
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY
      - N8N_USER_MANAGEMENT_JWT_SECRET
      - OLLAMA_HOST=ollama:11434
      - N8N_HOST=0.0.0.0
      - N8N_PROTOCOL=https
      - N8N_PORT=5678
      - N8N_PATH=/
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  ssl-generator:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: ssl-generator
    volumes:
      - nginx_ssl:/etc/nginx/ssl
    networks:
      - n8n_internal

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    networks:
      - n8n_internal
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_ssl:/etc/nginx/ssl:ro
    depends_on:
      - n8n
      - ssl-generator